// Package models contains the types for schema 'getskytrade'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// User represents a row from 'getskytrade.Users'.
type User struct {
	ID            int64         `json:"Id"`            // Id
	Username      string        `json:"UserName"`      // UserName
	Email         string        `json:"Email"`         // Email
	Passwordsalt  string        `json:"PasswordSalt"`  // PasswordSalt
	Passwordhash  string        `json:"PasswordHash"`  // PasswordHash
	Timezone      string        `json:"Timezone"`      // Timezone
	Country       string        `json:"Country"`       // Country
	State         string        `json:"State"`         // State
	City          string        `json:"City"`          // City
	Postalcode    string        `json:"PostalCode"`    // PostalCode
	Distanceunits string        `json:"DistanceUnits"` // DistanceUnits
	Currency      string        `json:"Currency"`      // Currency
	Status        sql.NullInt64 `json:"Status"`        // Status
	Registeredat  time.Time     `json:"RegisteredAt"`  // RegisteredAt

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the User exists in the database.
func (u *User) Exists() bool {
	return u._exists
}

// Deleted provides information if the User has been deleted from the database.
func (u *User) Deleted() bool {
	return u._deleted
}

// Insert inserts the User to the database.
func (u *User) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO getskytrade.Users (` +
		`UserName, Email, PasswordSalt, PasswordHash, Timezone, Country, State, City, PostalCode, DistanceUnits, Currency, Status, RegisteredAt` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, u.Username, u.Email, u.Passwordsalt, u.Passwordhash, u.Timezone, u.Country, u.State, u.City, u.Postalcode, u.Distanceunits, u.Currency, u.Status, u.Registeredat)
	res, err := db.Exec(sqlstr, u.Username, u.Email, u.Passwordsalt, u.Passwordhash, u.Timezone, u.Country, u.State, u.City, u.Postalcode, u.Distanceunits, u.Currency, u.Status, u.Registeredat)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	u.ID = int64(id)
	u._exists = true

	return nil
}

// Update updates the User in the database.
func (u *User) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if u._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE getskytrade.Users SET ` +
		`UserName = ?, Email = ?, PasswordSalt = ?, PasswordHash = ?, Timezone = ?, Country = ?, State = ?, City = ?, PostalCode = ?, DistanceUnits = ?, Currency = ?, Status = ?, RegisteredAt = ?` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, u.Username, u.Email, u.Passwordsalt, u.Passwordhash, u.Timezone, u.Country, u.State, u.City, u.Postalcode, u.Distanceunits, u.Currency, u.Status, u.Registeredat, u.ID)
	_, err = db.Exec(sqlstr, u.Username, u.Email, u.Passwordsalt, u.Passwordhash, u.Timezone, u.Country, u.State, u.City, u.Postalcode, u.Distanceunits, u.Currency, u.Status, u.Registeredat, u.ID)
	return err
}

// Save saves the User to the database.
func (u *User) Save(db XODB) error {
	if u.Exists() {
		return u.Update(db)
	}

	return u.Insert(db)
}

// Delete deletes the User from the database.
func (u *User) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return nil
	}

	// if deleted, bail
	if u._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM getskytrade.Users WHERE Id = ?`

	// run query
	XOLog(sqlstr, u.ID)
	_, err = db.Exec(sqlstr, u.ID)
	if err != nil {
		return err
	}

	// set deleted
	u._deleted = true

	return nil
}

// Country returns the Country associated with the User's Country (Country).
//
// Generated from foreign key 'Users_fk0'.
func (u *User) Country(db XODB) (*Country, error) {
	return CountryByCode(db, u.Country)
}

// State returns the State associated with the User's State (State).
//
// Generated from foreign key 'Users_fk1'.
func (u *User) State(db XODB) (*State, error) {
	return StateByCode(db, u.State)
}

// UserByEmail retrieves a row from 'getskytrade.Users' as a User.
//
// Generated from index 'Email'.
func UserByEmail(db XODB, email string) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, UserName, Email, PasswordSalt, PasswordHash, Timezone, Country, State, City, PostalCode, DistanceUnits, Currency, Status, RegisteredAt ` +
		`FROM getskytrade.Users ` +
		`WHERE Email = ?`

	// run query
	XOLog(sqlstr, email)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, email).Scan(&u.ID, &u.Username, &u.Email, &u.Passwordsalt, &u.Passwordhash, &u.Timezone, &u.Country, &u.State, &u.City, &u.Postalcode, &u.Distanceunits, &u.Currency, &u.Status, &u.Registeredat)
	if err != nil {
		return nil, err
	}

	return &u, nil
}

// UserByUsername retrieves a row from 'getskytrade.Users' as a User.
//
// Generated from index 'UserName'.
func UserByUsername(db XODB, username string) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, UserName, Email, PasswordSalt, PasswordHash, Timezone, Country, State, City, PostalCode, DistanceUnits, Currency, Status, RegisteredAt ` +
		`FROM getskytrade.Users ` +
		`WHERE UserName = ?`

	// run query
	XOLog(sqlstr, username)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, username).Scan(&u.ID, &u.Username, &u.Email, &u.Passwordsalt, &u.Passwordhash, &u.Timezone, &u.Country, &u.State, &u.City, &u.Postalcode, &u.Distanceunits, &u.Currency, &u.Status, &u.Registeredat)
	if err != nil {
		return nil, err
	}

	return &u, nil
}

// UserByID retrieves a row from 'getskytrade.Users' as a User.
//
// Generated from index 'Users_Id_pkey'.
func UserByID(db XODB, id int64) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, UserName, Email, PasswordSalt, PasswordHash, Timezone, Country, State, City, PostalCode, DistanceUnits, Currency, Status, RegisteredAt ` +
		`FROM getskytrade.Users ` +
		`WHERE Id = ?`

	// run query
	XOLog(sqlstr, id)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&u.ID, &u.Username, &u.Email, &u.Passwordsalt, &u.Passwordhash, &u.Timezone, &u.Country, &u.State, &u.City, &u.Postalcode, &u.Distanceunits, &u.Currency, &u.Status, &u.Registeredat)
	if err != nil {
		return nil, err
	}

	return &u, nil
}

// UsersByCountry retrieves a row from 'getskytrade.Users' as a User.
//
// Generated from index 'Users_fk0'.
func UsersByCountry(db XODB, country string) ([]*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, UserName, Email, PasswordSalt, PasswordHash, Timezone, Country, State, City, PostalCode, DistanceUnits, Currency, Status, RegisteredAt ` +
		`FROM getskytrade.Users ` +
		`WHERE Country = ?`

	// run query
	XOLog(sqlstr, country)
	q, err := db.Query(sqlstr, country)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*User{}
	for q.Next() {
		u := User{
			_exists: true,
		}

		// scan
		err = q.Scan(&u.ID, &u.Username, &u.Email, &u.Passwordsalt, &u.Passwordhash, &u.Timezone, &u.Country, &u.State, &u.City, &u.Postalcode, &u.Distanceunits, &u.Currency, &u.Status, &u.Registeredat)
		if err != nil {
			return nil, err
		}

		res = append(res, &u)
	}

	return res, nil
}

// UsersByState retrieves a row from 'getskytrade.Users' as a User.
//
// Generated from index 'Users_fk1'.
func UsersByState(db XODB, state string) ([]*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, UserName, Email, PasswordSalt, PasswordHash, Timezone, Country, State, City, PostalCode, DistanceUnits, Currency, Status, RegisteredAt ` +
		`FROM getskytrade.Users ` +
		`WHERE State = ?`

	// run query
	XOLog(sqlstr, state)
	q, err := db.Query(sqlstr, state)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*User{}
	for q.Next() {
		u := User{
			_exists: true,
		}

		// scan
		err = q.Scan(&u.ID, &u.Username, &u.Email, &u.Passwordsalt, &u.Passwordhash, &u.Timezone, &u.Country, &u.State, &u.City, &u.Postalcode, &u.Distanceunits, &u.Currency, &u.Status, &u.Registeredat)
		if err != nil {
			return nil, err
		}

		res = append(res, &u)
	}

	return res, nil
}
