// Package models contains the types for schema 'getskytrade'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"time"
)

// AdvertDetails represents a row from '[custom advert_details]'.
type AdvertDetails struct {
	ID                   int64     // Id
	Type                 int       // Type
	Author               string    // Author
	Tradeoptions         string    // TradeOptions
	Amountfrom           float64   // AmountFrom
	Amountto             float64   // AmountTo
	Fixedprice           float64   // FixedPrice
	Percentageadjustment float64   // PercentageAdjustment
	Currency             string    // Currency
	Additionalinfo       string    // AdditionalInfo
	Traveldistance       int64     // TravelDistance
	Traveldistanceuom    string    // TravelDistanceUoM
	Countrycode          string    // CountryCode
	Statecode            string    // StateCode
	City                 string    // City
	Postalcode           string    // PostalCode
	Status               int       // Status
	Createdat            time.Time // CreatedAt
}

// GetAdvertDetails runs a custom query, returning results as AdvertDetails.
func GetAdvertDetails(db XODB) ([]*AdvertDetails, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`    a.Id,` +
		`	a.Type,` +
		`	u.UserName as Author,` +
		`	a.TradeOptions,` +
		`	a.AmountFrom,` +
		`	a.AmountTo,` +
		`	a.FixedPrice,` +
		`	a.PercentageAdjustment,` +
		`	a.Currency,` +
		`	a.AdditionalInfo,` +
		`	a.TravelDistance,` +
		`	a.TravelDistanceUoM,` +
		`	a.CountryCode,` +
		`	a.StateCode,` +
		`	a.City,` +
		`	a.PostalCode,` +
		`	a.Status,` +
		`	a.CreatedAt ` +
		`FROM getskytrade.Adverts a ` +
		`LEFT JOIN getskytrade.Users u ON a.Author = u.Id ` +
		`ORDER BY CreatedAt LIMIT 10`

	// run query
	XOLog(sqlstr)
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*AdvertDetails{}
	for q.Next() {
		ad := AdvertDetails{}

		// scan
		err = q.Scan(&ad.ID, &ad.Type, &ad.Author, &ad.Tradeoptions, &ad.Amountfrom, &ad.Amountto, &ad.Fixedprice, &ad.Percentageadjustment, &ad.Currency, &ad.Additionalinfo, &ad.Traveldistance, &ad.Traveldistanceuom, &ad.Countrycode, &ad.Statecode, &ad.City, &ad.Postalcode, &ad.Status, &ad.Createdat)
		if err != nil {
			return nil, err
		}

		res = append(res, &ad)
	}

	return res, nil
}
