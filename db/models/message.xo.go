// Package models contains the types for schema 'getskytrade'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Message represents a row from 'getskytrade.Messages'.
type Message struct {
	ID        int64     `json:"Id"`        // Id
	Author    int64     `json:"Author"`    // Author
	Advertid  int64     `json:"AdvertId"`  // AdvertId
	Body      string    `json:"Body"`      // Body
	Createdat time.Time `json:"CreatedAt"` // CreatedAt

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Message exists in the database.
func (m *Message) Exists() bool {
	return m._exists
}

// Deleted provides information if the Message has been deleted from the database.
func (m *Message) Deleted() bool {
	return m._deleted
}

// Insert inserts the Message to the database.
func (m *Message) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO getskytrade.Messages (` +
		`Author, AdvertId, Body, CreatedAt` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, m.Author, m.Advertid, m.Body, m.Createdat)
	res, err := db.Exec(sqlstr, m.Author, m.Advertid, m.Body, m.Createdat)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	m.ID = int64(id)
	m._exists = true

	return nil
}

// Update updates the Message in the database.
func (m *Message) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if m._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE getskytrade.Messages SET ` +
		`Author = ?, AdvertId = ?, Body = ?, CreatedAt = ?` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, m.Author, m.Advertid, m.Body, m.Createdat, m.ID)
	_, err = db.Exec(sqlstr, m.Author, m.Advertid, m.Body, m.Createdat, m.ID)
	return err
}

// Save saves the Message to the database.
func (m *Message) Save(db XODB) error {
	if m.Exists() {
		return m.Update(db)
	}

	return m.Insert(db)
}

// Delete deletes the Message from the database.
func (m *Message) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return nil
	}

	// if deleted, bail
	if m._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM getskytrade.Messages WHERE Id = ?`

	// run query
	XOLog(sqlstr, m.ID)
	_, err = db.Exec(sqlstr, m.ID)
	if err != nil {
		return err
	}

	// set deleted
	m._deleted = true

	return nil
}

// User returns the User associated with the Message's Author (Author).
//
// Generated from foreign key 'Messages_fk0'.
func (m *Message) User(db XODB) (*User, error) {
	return UserByID(db, m.Author)
}

// Advert returns the Advert associated with the Message's Advertid (AdvertId).
//
// Generated from foreign key 'Messages_fk1'.
func (m *Message) Advert(db XODB) (*Advert, error) {
	return AdvertByID(db, m.Advertid)
}

// MessageByID retrieves a row from 'getskytrade.Messages' as a Message.
//
// Generated from index 'Messages_Id_pkey'.
func MessageByID(db XODB, id int64) (*Message, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, Author, AdvertId, Body, CreatedAt ` +
		`FROM getskytrade.Messages ` +
		`WHERE Id = ?`

	// run query
	XOLog(sqlstr, id)
	m := Message{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&m.ID, &m.Author, &m.Advertid, &m.Body, &m.Createdat)
	if err != nil {
		return nil, err
	}

	return &m, nil
}

// MessagesByAuthor retrieves a row from 'getskytrade.Messages' as a Message.
//
// Generated from index 'Messages_fk0'.
func MessagesByAuthor(db XODB, author int64) ([]*Message, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, Author, AdvertId, Body, CreatedAt ` +
		`FROM getskytrade.Messages ` +
		`WHERE Author = ?`

	// run query
	XOLog(sqlstr, author)
	q, err := db.Query(sqlstr, author)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Message{}
	for q.Next() {
		m := Message{
			_exists: true,
		}

		// scan
		err = q.Scan(&m.ID, &m.Author, &m.Advertid, &m.Body, &m.Createdat)
		if err != nil {
			return nil, err
		}

		res = append(res, &m)
	}

	return res, nil
}

// MessagesByAdvertid retrieves a row from 'getskytrade.Messages' as a Message.
//
// Generated from index 'Messages_fk1'.
func MessagesByAdvertid(db XODB, advertid int64) ([]*Message, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, Author, AdvertId, Body, CreatedAt ` +
		`FROM getskytrade.Messages ` +
		`WHERE AdvertId = ?`

	// run query
	XOLog(sqlstr, advertid)
	q, err := db.Query(sqlstr, advertid)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Message{}
	for q.Next() {
		m := Message{
			_exists: true,
		}

		// scan
		err = q.Scan(&m.ID, &m.Author, &m.Advertid, &m.Body, &m.Createdat)
		if err != nil {
			return nil, err
		}

		res = append(res, &m)
	}

	return res, nil
}
