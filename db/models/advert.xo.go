// Package models contains the types for schema 'getskytrade'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// Advert represents a row from 'getskytrade.Adverts'.
type Advert struct {
	ID                   int64           `json:"Id"`                   // Id
	Type                 int             `json:"Type"`                 // Type
	Author               int64           `json:"Author"`               // Author
	Tradeoptions         string          `json:"TradeOptions"`         // TradeOptions
	Amountfrom           float64         `json:"AmountFrom"`           // AmountFrom
	Amountto             sql.NullFloat64 `json:"AmountTo"`             // AmountTo
	Fixedprice           float64         `json:"FixedPrice"`           // FixedPrice
	Percentageadjustment float64         `json:"PercentageAdjustment"` // PercentageAdjustment
	Currency             string          `json:"Currency"`             // Currency
	Additionalinfo       string          `json:"AdditionalInfo"`       // AdditionalInfo
	Traveldistance       int64           `json:"TravelDistance"`       // TravelDistance
	Traveldistanceuom    string          `json:"TravelDistanceUoM"`    // TravelDistanceUoM
	Country              string          `json:"Country"`              // Country
	State                sql.NullString  `json:"State"`                // State
	City                 string          `json:"City"`                 // City
	Postalcode           string          `json:"PostalCode"`           // PostalCode
	Status               int             `json:"Status"`               // Status
	Createdat            time.Time       `json:"CreatedAt"`            // CreatedAt

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Advert exists in the database.
func (a *Advert) Exists() bool {
	return a._exists
}

// Deleted provides information if the Advert has been deleted from the database.
func (a *Advert) Deleted() bool {
	return a._deleted
}

// Insert inserts the Advert to the database.
func (a *Advert) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO getskytrade.Adverts (` +
		`Type, Author, TradeOptions, AmountFrom, AmountTo, FixedPrice, PercentageAdjustment, Currency, AdditionalInfo, TravelDistance, TravelDistanceUoM, Country, State, City, PostalCode, Status, CreatedAt` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, a.Type, a.Author, a.Tradeoptions, a.Amountfrom, a.Amountto, a.Fixedprice, a.Percentageadjustment, a.Currency, a.Additionalinfo, a.Traveldistance, a.Traveldistanceuom, a.Country, a.State, a.City, a.Postalcode, a.Status, a.Createdat)
	res, err := db.Exec(sqlstr, a.Type, a.Author, a.Tradeoptions, a.Amountfrom, a.Amountto, a.Fixedprice, a.Percentageadjustment, a.Currency, a.Additionalinfo, a.Traveldistance, a.Traveldistanceuom, a.Country, a.State, a.City, a.Postalcode, a.Status, a.Createdat)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	a.ID = int64(id)
	a._exists = true

	return nil
}

// Update updates the Advert in the database.
func (a *Advert) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if a._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE getskytrade.Adverts SET ` +
		`Type = ?, Author = ?, TradeOptions = ?, AmountFrom = ?, AmountTo = ?, FixedPrice = ?, PercentageAdjustment = ?, Currency = ?, AdditionalInfo = ?, TravelDistance = ?, TravelDistanceUoM = ?, Country = ?, State = ?, City = ?, PostalCode = ?, Status = ?, CreatedAt = ?` +
		` WHERE Id = ?`

	// run query
	XOLog(sqlstr, a.Type, a.Author, a.Tradeoptions, a.Amountfrom, a.Amountto, a.Fixedprice, a.Percentageadjustment, a.Currency, a.Additionalinfo, a.Traveldistance, a.Traveldistanceuom, a.Country, a.State, a.City, a.Postalcode, a.Status, a.Createdat, a.ID)
	_, err = db.Exec(sqlstr, a.Type, a.Author, a.Tradeoptions, a.Amountfrom, a.Amountto, a.Fixedprice, a.Percentageadjustment, a.Currency, a.Additionalinfo, a.Traveldistance, a.Traveldistanceuom, a.Country, a.State, a.City, a.Postalcode, a.Status, a.Createdat, a.ID)
	return err
}

// Save saves the Advert to the database.
func (a *Advert) Save(db XODB) error {
	if a.Exists() {
		return a.Update(db)
	}

	return a.Insert(db)
}

// Delete deletes the Advert from the database.
func (a *Advert) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return nil
	}

	// if deleted, bail
	if a._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM getskytrade.Adverts WHERE Id = ?`

	// run query
	XOLog(sqlstr, a.ID)
	_, err = db.Exec(sqlstr, a.ID)
	if err != nil {
		return err
	}

	// set deleted
	a._deleted = true

	return nil
}

// User returns the User associated with the Advert's Author (Author).
//
// Generated from foreign key 'Adverts_fk0'.
func (a *Advert) User(db XODB) (*User, error) {
	return UserByID(db, a.Author)
}

// Country returns the Country associated with the Advert's Country (Country).
//
// Generated from foreign key 'Adverts_fk1'.
func (a *Advert) Country(db XODB) (*Country, error) {
	return CountryByCode(db, a.Country)
}

// State returns the State associated with the Advert's State (State).
//
// Generated from foreign key 'Adverts_fk2'.
func (a *Advert) State(db XODB) (*State, error) {
	return StateByCode(db, a.State.String)
}

// AdvertByID retrieves a row from 'getskytrade.Adverts' as a Advert.
//
// Generated from index 'Adverts_Id_pkey'.
func AdvertByID(db XODB, id int64) (*Advert, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, Type, Author, TradeOptions, AmountFrom, AmountTo, FixedPrice, PercentageAdjustment, Currency, AdditionalInfo, TravelDistance, TravelDistanceUoM, Country, State, City, PostalCode, Status, CreatedAt ` +
		`FROM getskytrade.Adverts ` +
		`WHERE Id = ?`

	// run query
	XOLog(sqlstr, id)
	a := Advert{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&a.ID, &a.Type, &a.Author, &a.Tradeoptions, &a.Amountfrom, &a.Amountto, &a.Fixedprice, &a.Percentageadjustment, &a.Currency, &a.Additionalinfo, &a.Traveldistance, &a.Traveldistanceuom, &a.Country, &a.State, &a.City, &a.Postalcode, &a.Status, &a.Createdat)
	if err != nil {
		return nil, err
	}

	return &a, nil
}

// AdvertsByAuthor retrieves a row from 'getskytrade.Adverts' as a Advert.
//
// Generated from index 'Adverts_fk0'.
func AdvertsByAuthor(db XODB, author int64) ([]*Advert, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, Type, Author, TradeOptions, AmountFrom, AmountTo, FixedPrice, PercentageAdjustment, Currency, AdditionalInfo, TravelDistance, TravelDistanceUoM, Country, State, City, PostalCode, Status, CreatedAt ` +
		`FROM getskytrade.Adverts ` +
		`WHERE Author = ?`

	// run query
	XOLog(sqlstr, author)
	q, err := db.Query(sqlstr, author)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Advert{}
	for q.Next() {
		a := Advert{
			_exists: true,
		}

		// scan
		err = q.Scan(&a.ID, &a.Type, &a.Author, &a.Tradeoptions, &a.Amountfrom, &a.Amountto, &a.Fixedprice, &a.Percentageadjustment, &a.Currency, &a.Additionalinfo, &a.Traveldistance, &a.Traveldistanceuom, &a.Country, &a.State, &a.City, &a.Postalcode, &a.Status, &a.Createdat)
		if err != nil {
			return nil, err
		}

		res = append(res, &a)
	}

	return res, nil
}

// AdvertsByCountry retrieves a row from 'getskytrade.Adverts' as a Advert.
//
// Generated from index 'Adverts_fk1'.
func AdvertsByCountry(db XODB, country string) ([]*Advert, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, Type, Author, TradeOptions, AmountFrom, AmountTo, FixedPrice, PercentageAdjustment, Currency, AdditionalInfo, TravelDistance, TravelDistanceUoM, Country, State, City, PostalCode, Status, CreatedAt ` +
		`FROM getskytrade.Adverts ` +
		`WHERE Country = ?`

	// run query
	XOLog(sqlstr, country)
	q, err := db.Query(sqlstr, country)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Advert{}
	for q.Next() {
		a := Advert{
			_exists: true,
		}

		// scan
		err = q.Scan(&a.ID, &a.Type, &a.Author, &a.Tradeoptions, &a.Amountfrom, &a.Amountto, &a.Fixedprice, &a.Percentageadjustment, &a.Currency, &a.Additionalinfo, &a.Traveldistance, &a.Traveldistanceuom, &a.Country, &a.State, &a.City, &a.Postalcode, &a.Status, &a.Createdat)
		if err != nil {
			return nil, err
		}

		res = append(res, &a)
	}

	return res, nil
}

// AdvertsByState retrieves a row from 'getskytrade.Adverts' as a Advert.
//
// Generated from index 'Adverts_fk2'.
func AdvertsByState(db XODB, state sql.NullString) ([]*Advert, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Id, Type, Author, TradeOptions, AmountFrom, AmountTo, FixedPrice, PercentageAdjustment, Currency, AdditionalInfo, TravelDistance, TravelDistanceUoM, Country, State, City, PostalCode, Status, CreatedAt ` +
		`FROM getskytrade.Adverts ` +
		`WHERE State = ?`

	// run query
	XOLog(sqlstr, state)
	q, err := db.Query(sqlstr, state)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Advert{}
	for q.Next() {
		a := Advert{
			_exists: true,
		}

		// scan
		err = q.Scan(&a.ID, &a.Type, &a.Author, &a.Tradeoptions, &a.Amountfrom, &a.Amountto, &a.Fixedprice, &a.Percentageadjustment, &a.Currency, &a.Additionalinfo, &a.Traveldistance, &a.Traveldistanceuom, &a.Country, &a.State, &a.City, &a.Postalcode, &a.Status, &a.Createdat)
		if err != nil {
			return nil, err
		}

		res = append(res, &a)
	}

	return res, nil
}
