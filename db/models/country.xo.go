// Package models contains the types for schema 'getskytrade'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// Country represents a row from 'getskytrade.Countries'.
type Country struct {
	Code string `json:"Code"` // Code
	Name string `json:"Name"` // Name

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Country exists in the database.
func (c *Country) Exists() bool {
	return c._exists
}

// Deleted provides information if the Country has been deleted from the database.
func (c *Country) Deleted() bool {
	return c._deleted
}

// Insert inserts the Country to the database.
func (c *Country) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO getskytrade.Countries (` +
		`Code, Name` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, c.Code, c.Name)
	_, err = db.Exec(sqlstr, c.Code, c.Name)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Country in the database.
func (c *Country) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE getskytrade.Countries SET ` +
		`Name = ?` +
		` WHERE Code = ?`

	// run query
	XOLog(sqlstr, c.Name, c.Code)
	_, err = db.Exec(sqlstr, c.Name, c.Code)
	return err
}

// Save saves the Country to the database.
func (c *Country) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Delete deletes the Country from the database.
func (c *Country) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM getskytrade.Countries WHERE Code = ?`

	// run query
	XOLog(sqlstr, c.Code)
	_, err = db.Exec(sqlstr, c.Code)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// CountryByCode retrieves a row from 'getskytrade.Countries' as a Country.
//
// Generated from index 'Countries_Code_pkey'.
func CountryByCode(db XODB, code string) (*Country, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Code, Name ` +
		`FROM getskytrade.Countries ` +
		`WHERE Code = ?`

	// run query
	XOLog(sqlstr, code)
	c := Country{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, code).Scan(&c.Code, &c.Name)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
